/**
 * 这个文件
 * 用到了vue-cli2 老版本的 webpack-hot-middleware
 * webpack-dev-middleware等库，而新版本的vue-cli3已经不用这些，更简洁，详见：
 * hot-update-method2.js
 */
// const fs = require('fs');
const fs = require('fs-extra');
const path = require('path');
const MFS = require('memory-fs');
const webpack = require('webpack');
const chokidar = require('chokidar');
const clientConfig = require('./util').getClientWebpackConfig();
//下面这个获取的信息从vue.config.js中来的，默认是clitentConfig 因为 TARGET_NODE =process.env.WEBPACK_TARGET === "node"返回的是false
//const clientConfig = require('@vue/cli-service/webpack.config')
const serverConfig = require('./util').getServerWebpackConfig()


const readFile = (fs, file) => {
  try {
    return fs.readFileSync(file, 'utf-8')
  } catch (e) { console.log('------------> readfile error:', e); }
  return '{}';
};

module.exports = function setupDevServer(isSave2Disk, app, templatePath, cb) {
  let bundle;
  let template;
  let clientManifest;

  let ready;
  const readyPromise = new Promise(r => { ready = r });
  const update = () => {
    if (bundle && clientManifest) {
      ready();
      cb(bundle, {
        template,
        clientManifest,
        inject: false,
        shouldPreload: (file, type) => {
          if (type === 'script' || type === "css") {
            console.log('-----------------> shouldPreload.file:', file);
            return true
          }
        }
      })
    }
  };


  // read template from disk and watch
  template = fs.readFileSync(templatePath, 'utf-8');
  chokidar.watch(templatePath).on('change', () => {
    template = fs.readFileSync(templatePath, 'utf-8');
    console.log('index.html template updated.');
    update();
  });
  // modify client config to work with hot middleware
  // clientConfig.entry.app = ['webpack-hot-middleware/client', clientConfig.entry.app];
  // clientConfig.output.filename = '[name].js';
  clientConfig.plugins.push(
    new webpack.HotModuleReplacementPlugin(),
    new webpack.NoEmitOnErrorsPlugin()
  );
  clientConfig.devServer = { open: true };//打开浏览器,无效


  fs.join = path.join;//fs缺少join对象，会在save静态文件时报错
  // dev middleware
  const clientCompiler = webpack(clientConfig);
  const devMiddleware = require('webpack-dev-middleware')(clientCompiler, {
    publicPath: clientConfig.output.publicPath,
    noInfo: true
  });

  if (isSave2Disk){
    //采用保存到disk时，会在dist/client文件夹里面产生很多缓存文件：
    //例如35526112593724086b38.hot-update.json,而采用hot-update-method1.js时不会
    devMiddleware.fileSystem = fs;
    clientCompiler.outputFileSystem = fs;
  }
  app.use(devMiddleware);
  clientCompiler.plugin('done', stats => {
    stats = stats.toJson();
    stats.errors.forEach(err => console.error(err));
    stats.warnings.forEach(err => console.warn(err));
    if (stats.errors.length) return;
    const clientManifestPath = path.join(
      clientConfig.output.path,
      'vue-ssr-client-manifest.json'
    );
    clientManifest = JSON.parse(readFile(
      clientCompiler.outputFileSystem,
      // devMiddleware.fileSystem,
      clientManifestPath
    ));
    update()
  });

  // hot middleware
  app.use(require('webpack-hot-middleware')(clientCompiler, { heartbeat: 5000 }));

  // watch and update server renderer
  const serverCompiler = webpack(serverConfig);

  // fs.join = path.join;
  if (isSave2Disk)
    serverCompiler.outputFileSystem = fs; //如何获得app 对象,让它把文件写到硬盘？
  else {
    const mfs = new MFS();
    serverCompiler.outputFileSystem = mfs;
  }
  serverCompiler.watch({}, (err, stats) => {
    if (err) throw err;
    stats = stats.toJson();
    if (stats.errors.length) return;

    const bundlePath = path.join(
      serverConfig.output.path,
      'vue-ssr-server-bundle.json'
    );
    // read bundle generated by vue-ssr-webpack-plugin
    bundle = JSON.parse(readFile(serverCompiler.outputFileSystem, bundlePath));
    update()
  });
  return readyPromise
};
